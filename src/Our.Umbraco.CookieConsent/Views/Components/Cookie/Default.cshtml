@using Our.Umbraco.CookieConsent.Extensions
@using Our.Umbraco.CookieConsent.Interfaces
@using Our.Umbraco.CookieConsent.Models
@using Umbraco.Cms.Web.Common
@inject ICookieConsentService CookieConsentService
@inject UmbracoHelper UmbracoHelper
@{
    CookieConsentSettingsModel cookieSettings = CookieConsentService.GetSettings();

    var categories = new List<dynamic>();
    foreach (var property in typeof(CookieCategoriesModel).GetProperties())
    {
        var value = ((bool Enabled, bool ReadOnly))property.GetValue(cookieSettings.ApplicableCategories);
        if (value.Enabled)
        {
            var categoryName = property.Name;

            var sectionTitle = UmbracoHelper.GetDictionaryValue(
                string.Format(Translations.PreferencesModal.Sections.Title, categoryName)
            );
            var sectionDescr = UmbracoHelper.GetDictionaryValue(
                string.Format(Translations.PreferencesModal.Sections.Description, categoryName)
            );

            categories.Add(new
            {
                Name = categoryName,
                LowerName = categoryName.ToLower(),
                Title = sectionTitle,
                Description = sectionDescr,
                IsReadOnly = value.ReadOnly.ToString().ToLower()
            });
        }
    }

    var googleConsentModeScript = cookieSettings.BuiltInScripts?
    .FirstOrDefault(b => string.Equals(b.Provider?.Trim(), "GoogleConsentMode", StringComparison.OrdinalIgnoreCase));

    bool isGoogleConsentModeActivated = googleConsentModeScript != null;
}
@if (cookieSettings is not null)
{
    <link rel="stylesheet" href="/libraries/cookieconsent-orestbida/cookieconsent.min.css" />
    <script src="/libraries/cookieconsent-orestbida/cookieconsent.umd.min.js"></script>
    <script>
        window.addEventListener('load', () => {
            const CAT_ANALYTICS = "analytics";
            const CAT_ADVERTISEMENT = "advertisement";
            const CAT_FUNCTIONALITY = "functionality";
            const CAT_SECURITY = "security";

            const SERVICE_AD_STORAGE = 'ad_storage';
            const SERVICE_AD_USER_DATA = 'ad_user_data';
            const SERVICE_AD_PERSONALIZATION = 'ad_personalization';
            const SERVICE_ANALYTICS_STORAGE = 'analytics_storage';
            const SERVICE_FUNCTIONALITY_STORAGE = 'functionality_storage';
            const SERVICE_PERSONALIZATION_STORAGE = 'personalization_storage';
            const SERVICE_SECURITY_STORAGE = 'security_storage';

            @if (isGoogleConsentModeActivated && !string.IsNullOrWhiteSpace(googleConsentModeScript.Id)) {
                <text>
                const gtagScript = document.createElement('script');
                gtagScript.src = 'https://www.googletagmanager.com/gtag/js?id=@googleConsentModeScript.Id';
                gtagScript.async = true;
                document.head.appendChild(gtagScript);

                gtagScript.onload = function () {
                    // Define dataLayer and the gtag function.
                    window.dataLayer = window.dataLayer || [];
                    function gtag(){dataLayer.push(arguments);}

                    // Set default consent to 'denied' (this should happen before changing any other dataLayer)
                    gtag('consent', 'default', {
                        [SERVICE_AD_STORAGE]: 'denied',
                        [SERVICE_AD_USER_DATA]: 'denied',
                        [SERVICE_AD_PERSONALIZATION]: 'denied',
                        [SERVICE_ANALYTICS_STORAGE]: 'denied',
                        [SERVICE_FUNCTIONALITY_STORAGE]: 'denied',
                        [SERVICE_PERSONALIZATION_STORAGE]: 'denied',
                        [SERVICE_SECURITY_STORAGE]: 'denied',
                    });
                };
                </text>
            }

            CookieConsent.run({
                current_lang: '@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName',
                autoclear_cookies: true,
                cookie_name: 'umbraco_cookieconsent',
                cookie_expiration: 31,
                guiOptions: {
                    consentModal: {
                        layout: "@cookieSettings?.GuiOptions.ConsentModalLayout.GetDisplayName()",
                        position: "@cookieSettings?.GuiOptions.ConsentModalPosition.GetDisplayName()",
                        equalWeightButtons: true,
                        flipButtons: false,
                        transition: 'slide'
                    },
                    preferencesModal: {
                        layout: "@cookieSettings?.GuiOptions.PreferencesModalLayout.GetDisplayName()",
                        position: "@cookieSettings?.GuiOptions.PreferencesModalPosition.GetDisplayName()",
                        equalWeightButtons: true,
                        flipButtons: false,
                    }
                },
                categories: {
                    @foreach (var category in categories)
                    {
                        var isAnalytics = category.LowerName == "analytics";
                        <text>@category.LowerName: {
                            readOnly: @category.IsReadOnly,
                            enabled: true,
                            @if (isAnalytics && isGoogleConsentModeActivated)
                            {
                                <text>
                                autoClear: {
                                    cookies: [
                                        {
                                            name: /^_ga/,   // regex: match all cookies starting with '_ga'
                                        },
                                        {
                                            name: '_gid',   // string: exact cookie name
                                        }
                                    ]
                                },
                                services: {
                                    [SERVICE_ANALYTICS_STORAGE]: {
                                        label: 'Enables storage (such as cookies) related to analytics e.g. visit duration.',
                                    }
                                }
                                </text>
                            }
                        },</text>
                    }
                },
                language: {
                    default: "@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName",
                    translations: {
                        "@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName": {
                            consentModal: {
                                title: "@UmbracoHelper.GetDictionaryValue(Translations.ConsentModal.Title)",
                                description: "@UmbracoHelper.GetDictionaryValue(Translations.ConsentModal.Description)",
                                acceptAllBtn: "@UmbracoHelper.GetDictionaryValue(Translations.ConsentModal.AcceptAll)",
                                rejectAllBtn: "@UmbracoHelper.GetDictionaryValue(Translations.ConsentModal.RejectAll)",
                                showPreferencesBtn: "@UmbracoHelper.GetDictionaryValue(Translations.ConsentModal.ManagePreferences)",
                                footer: "@UmbracoHelper.GetDictionaryValue(Translations.ConsentModal.Footer)"
                            },
                            preferencesModal: {
                                title: "@UmbracoHelper.GetDictionaryValue(Translations.PreferencesModal.Title)",
                                acceptAllBtn: "@UmbracoHelper.GetDictionaryValue(Translations.PreferencesModal.AcceptAll)",
                                rejectAllBtn: "@UmbracoHelper.GetDictionaryValue(Translations.PreferencesModal.RejectAll)",
                                savePreferencesBtn: "@UmbracoHelper.GetDictionaryValue(Translations.PreferencesModal.Save)",
                                closeIconLabel: "@UmbracoHelper.GetDictionaryValue(Translations.PreferencesModal.CloseIconLabel)",
                                serviceCounterLabel: "@UmbracoHelper.GetDictionaryValue(Translations.PreferencesModal.ServiceCounterLabel)",
                                sections: [
                                    @foreach (var category in categories)
                                    {
                                        var isAnalytics = category.LowerName == "analytics";
                                        <text>{
                                            title: "@category.Title",
                                            description: "@category.Description",
                                            linkedCategory: "@category.LowerName"
                                            @if (isAnalytics && isGoogleConsentModeActivated)
                                            {
                                                <text>,
                                                cookieTable: {
                                                    headers: {
                                                        name: "Name",
                                                        domain: "Service",
                                                        description: "Description",
                                                        expiration: "Expiration"
                                                    },
                                                    body: [
                                                        {
                                                            name: "_ga",
                                                            domain: "Google Analytics",
                                                            description: "Cookie set by <a href=\"https://business.safety.google/adscookies/\">Google Analytics</a>",
                                                            expiration: "Expires after 12 days"
                                                        },
                                                        {
                                                            name: "_gid",
                                                            domain: "Google Analytics",
                                                            description: "Cookie set by <a href=\"https://business.safety.google/adscookies/\">Google Analytics</a>",
                                                            expiration: "Session"
                                                        }
                                                    ]
                                                }</text>
                                            }
                                        },</text>
                                    }
                                ]
                            }
                        }
                    }
                },
                disablePageInteraction: @((cookieSettings != null && cookieSettings.MiscOptions.DisablePageInteraction) ? "true" : "false"),
                onFirstConsent: () => {
                    runScripts();
                    updateGtagConsent();
                },
                onConsent: () => {
                    runScripts();
                    updateGtagConsent();
                },
                onChange: () => {
                    runScripts();
                    updateGtagConsent();
                }
            });

            function runScripts() {
                @if(cookieSettings.CustomScripts != null && cookieSettings.CustomScripts.Any())
                {
                    @foreach (var script in cookieSettings.CustomScripts)
                    {
                        var cat = script.Type.ToString().ToLowerInvariant();
                        if (!string.IsNullOrWhiteSpace(script.Code))
                        {
                            <text>
                            if (CookieConsent.acceptedCategory('@cat')) {
                                @Html.Raw(script.Code)
                            }
                            </text>
                        }
                    }
                }
            }

            function updateGtagConsent() {
                if (!window.gtag) return;

                gtag('consent', 'update', {
                    [SERVICE_ANALYTICS_STORAGE]: CookieConsent.acceptedService(SERVICE_ANALYTICS_STORAGE, CAT_ANALYTICS) ? 'granted' : 'denied',
                    [SERVICE_AD_STORAGE]: CookieConsent.acceptedService(SERVICE_AD_STORAGE, CAT_ADVERTISEMENT) ? 'granted' : 'denied',
                    [SERVICE_AD_USER_DATA]: CookieConsent.acceptedService(SERVICE_AD_USER_DATA, CAT_ADVERTISEMENT) ? 'granted' : 'denied',
                    [SERVICE_AD_PERSONALIZATION]: CookieConsent.acceptedService(SERVICE_AD_PERSONALIZATION, CAT_ADVERTISEMENT) ? 'granted' : 'denied',
                    [SERVICE_FUNCTIONALITY_STORAGE]: CookieConsent.acceptedService(SERVICE_FUNCTIONALITY_STORAGE, CAT_FUNCTIONALITY) ? 'granted' : 'denied',
                    [SERVICE_PERSONALIZATION_STORAGE]: CookieConsent.acceptedService(SERVICE_PERSONALIZATION_STORAGE, CAT_FUNCTIONALITY) ? 'granted' : 'denied',
                    [SERVICE_SECURITY_STORAGE]: CookieConsent.acceptedService(SERVICE_SECURITY_STORAGE, CAT_SECURITY) ? 'granted' : 'denied'
                });
            }
        });
        @if(cookieSettings != null && cookieSettings.MiscOptions.EnableDarkMode) {
            <text>document.documentElement.classList.add('cc--darkmode');</text>
        }
    </script>
}